/*
 * @lc app=leetcode id=924 lang=java
 *
 * [924] Minimize Malware Spread
 *
 * https://leetcode.com/problems/minimize-malware-spread/description/
 *
 * algorithms
 * Hard (41.93%)
 * Likes:    643
 * Dislikes: 426
 * Total Accepted:    37.9K
 * Total Submissions: 90.5K
 * Testcase Example:  '[[1,1,0],[1,1,0],[0,0,1]]\n[0,1]'
 *
 * You are given a network of n nodes represented as an n x n adjacency matrix
 * graph, where the i^th node is directly connected to the j^th node if
 * graph[i][j] == 1.
 * 
 * Some nodes initial are initially infected by malware. Whenever two nodes are
 * directly connected, and at least one of those two nodes is infected by
 * malware, both nodes will be infected by malware. This spread of malware will
 * continue until no more nodes can be infected in this manner.
 * 
 * Suppose M(initial) is the final number of nodes infected with malware in the
 * entire network after the spread of malware stops. We will remove exactly one
 * node from initial.
 * 
 * Return the node that, if removed, would minimize M(initial). If multiple
 * nodes could be removed to minimize M(initial), return such a node with the
 * smallest index.
 * 
 * Note that if a node was removed from the initial list of infected nodes, it
 * might still be infected later due to the malware spread.
 * 
 * 
 * Example 1:
 * Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
 * Output: 0
 * Example 2:
 * Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
 * Output: 0
 * Example 3:
 * Input: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
 * Output: 1
 * 
 * 
 * Constraints:
 * 
 * 
 * n == graph.length
 * n == graph[i].length
 * 2 <= n <= 300
 * graph[i][j] is 0 or 1.
 * graph[i][j] == graph[j][i]
 * graph[i][i] == 1
 * 1 <= initial.length <= n
 * 0 <= initial[i] <= n - 1
 * All the integers in initial are unique.
 * 
 * 
 */

// @lc code=start
class Solution {

    int[] p, s, c;

    private int find(int x) {
        if (p[x] != x)
            p[x] = find(p[x]);
        return p[x];
    }

    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        p = new int[n];
        s = new int[n];
        c = new int[n];
        for (int i = 0; i < n; i++) {
            p[i] = i;
            s[i] = 1;
            c[i] = 0;
        }
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (graph[i][j] == 1 && find(i) != find(j)) {
                    s[find(j)] += s[find(i)];
                    p[find(i)] = find(j);
                }
            }
        }
        for (int infectedIdx : initial) {
            c[find(infectedIdx)]++;
        }

        int resIdx = n, resSize = -1;
        for (int infectedIdx : initial) {
            int unionSize = 0;
            if (c[find(infectedIdx)] == 1) {
                unionSize = s[find(infectedIdx)];
            }
            if (unionSize > resSize) {
                resIdx = infectedIdx;
                resSize = unionSize;
            } else if (unionSize == resSize && infectedIdx < resIdx) {
                resIdx = infectedIdx;
            }
        }
        return resIdx;
    }
}
// @lc code=end
