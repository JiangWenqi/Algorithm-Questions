// @before-stub-for-debug-begin
#include <string>
#include <vector>

#include "commoncppproblem924.h"

using namespace std;
// @before-stub-for-debug-end

/*
 * @lc app=leetcode id=924 lang=cpp
 *
 * [924] Minimize Malware Spread
 *
 * https://leetcode.com/problems/minimize-malware-spread/description/
 *
 * algorithms
 * Hard (41.93%)
 * Likes:    643
 * Dislikes: 426
 * Total Accepted:    37.9K
 * Total Submissions: 90.4K
 * Testcase Example:  '[[1,1,0],[1,1,0],[0,0,1]]\n[0,1]'
 *
 * You are given a network of n nodes represented as an n x n adjacency matrix
 * graph, where the i^th node is directly connected to the j^th node if
 * graph[i][j] == 1.
 *
 * Some nodes initial are initially infected by malware. Whenever two nodes are
 * directly connected, and at least one of those two nodes is infected by
 * malware, both nodes will be infected by malware. This spread of malware will
 * continue until no more nodes can be infected in this manner.
 *
 * Suppose M(initial) is the final number of nodes infected with malware in the
 * entire network after the spread of malware stops. We will remove exactly one
 * node from initial.
 *
 * Return the node that, if removed, would minimize M(initial). If multiple
 * nodes could be removed to minimize M(initial), return such a node with the
 * smallest index.
 *
 * Note that if a node was removed from the initial list of infected nodes, it
 * might still be infected later due to the malware spread.
 *
 *
 * Example 1:
 * Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
 * Output: 0
 * Example 2:
 * Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
 * Output: 0
 * Example 3:
 * Input: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
 * Output: 1
 *
 *
 * Constraints:
 *
 *
 * n == graph.length
 * n == graph[i].length
 * 2 <= n <= 300
 * graph[i][j] is 0 or 1.
 * graph[i][j] == graph[j][i]
 * graph[i][i] == 1
 * 1 <= initial.length <= n
 * 0 <= initial[i] <= n - 1
 * All the integers in initial are unique.
 *
 *
 */

// @lc code=start
const int N = 310;
class Solution {
 private:
  int p[N], s[N], infected[N];
  int find(int x) {
    if (p[x] != x) p[x] = find(p[x]);
    return p[x];
  }

 public:
  int minMalwareSpread(vector<vector<int>> &graph, vector<int> &initial) {
    int n = graph.size();
    for (int i = 0; i < n; i++) p[i] = i, s[i] = 1, infected[i] = 0;

    for (int i = 0; i < n; i++) {
      for (int j = i + 1; j < n; j++) {
        if (graph[i][j] && find(i) != find(j)) {
          // important
          // 1. add sizeof j to i
          s[find(i)] += s[find(j)];
          // 2. link i to j
          p[find(j)] = find(i);
        }
      }
    }

    for (auto &idx : initial) infected[find(idx)]++;

    int res_size = -1, res_idx = N;
    for (auto &idx : initial) {
      int infected_union = 0;
      if (infected[find(idx)] == 1) infected_union = s[find(idx)];
      if (res_size < infected_union) {
        res_size = infected_union;
        res_idx = idx;
      } else if (res_size == infected_union && res_idx > idx) {
        res_idx = idx;
      }
    }
    return res_idx;
  }
};
// @lc code=end
